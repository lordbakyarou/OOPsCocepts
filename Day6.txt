Custom ArrayList - 

ArrayList is a dynamic array which mean we can dynamically add anything to it or even delete it unlike array where we can only add the amount of data which we specify at the declaration of array. When we do int[] arr = new int[10] now we are only restrict to add only 10 integers at different position in the array.

But what if we want a datastructor where we can add mulitiple elements without restriction. This can be done using ArrayList. Why ArrayList is called a dynamic array because it dynamically changes its size according to the users input. If user wants 100 elements then we can add 100 elements without specifying beforehand. How does it do that?

ArrayList is nothing but a array but with additional feature. Internal implementation of arrayList is actually Array only. So the arraylist dynamic size increase if based on a logic where if the existing array is getting fulled then we create a new array of 2*array.length.
We can have a default array with size 10. And as soon as we know that the array is getting full we can increase the size of the array by creating a temp array = new int[2*arr.length] and copying all the element of array to temp array and then assigning the reference of temp array to arr; arr = temp;
So now when the garbage collector runs it will remove sthe previous values of array.

How we  make our own array?
We can start by creating a class CustomArrayList;
In that we can 2 variables default_size and size. We will know about size later
Now when we create a object of this class we want it to declare the size by default value.
Once the array is created of size 10. Then we can work on add method
add method will have int num paramter. Now we will use size which is nothing but a pointer which keeps count that is the pointer going out of bounds.
So we will add the element on the pointer. pointer will be set as 0 initilaly.
Now what will happend if we add 11th element then we want the array to resize to 20. 
So we can write the method for that too. There we will create a new temp array and copy all the element and assign the refrent to our main array. 
and then add our element.
Like wise we can create a get method whihc will return index value that we pass. 
We can create a delete method as well. Where we will just shift the element in the front to the left.
And like this we can create many method of arraylsit in our custom arraylist.

But the problem we will face is when we want to create a custom arraylist of different types like Double, String, Float, Long, Boolean. We cannot do it like this since we have hardcoded it as int. Then we need to make all of these types of classes and the code is not modular. We want to create a arraylist code which is reusable.

Generics - It allows you to create a classes, Intefaces, and methods that can work with differnet type. It helps to create a reusable code. It will baiscally help us to create what ever class we want. We just want to make sure we specify it when we create the object of that class.

So how does it work - It  uses <ClassName>. You know when we create arraylist we do this Arraylist<Integer> list = new ArrayList<>();
So basically we are doing this. the value if <> will represent what type of our arraylist will be. SO how do we implement it?
Simple when we create our class we can just have it as class MyCustomArraylist<T> here T is what object we passed its a parameter. Then we can create a type of T[] arr  = new T[]; But this wont work because what if we dont pass anything then what will T be. So for that reason we need to make a arr of Object class like this.
Object[] arr = new Object[Size];
	
And then we can have add(T userInput) where T represents the class But now even if we dont pass any thing it will bydefault will be a Object class only becuase in java everything inherits object class.

And we can return T in get method as well like public T get (int index);
Below is my code for this custom Arraylist;
import java.util.*;
import java.lang.*;
import java.io.*;

class MyArrayList<T>{
	final static int DEFAULT_SIZE = 5;
	Object[] arr;
	int size = 0;

	MyArrayList(){
		arr = new Object[DEFAULT_SIZE];
	}

	public void add(T num){
		

		if(size == arr.length-1){
			resize(arr.length-1);
			arr[size++] = num;
		}
		else{
			arr[size++] = num;
			}
	}

	public void resize(int num){
		Object[] temp = new Object[num*2];

		for(int i =0;i<arr.length;i++){
			temp[i] = arr[i];
		}
		arr = temp;
	}

	public T get(int index){
		return (T)(arr[index]);
	}

	public String toString(){
		return Arrays.toString(arr);
	}
}

public class Main
{
	
	public static void main (String[] args) throws java.lang.Exception
	{
		//your code here
		MyArrayList<String> list = new MyArrayList<String>();
		list.add("4");
		list.add("5");
		
		
		System.out.println(list.toString());
		
	}
}